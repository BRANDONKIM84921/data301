# -*- coding: utf-8 -*-
"""DATA 301 Lab 1A - Brandon Kim

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AlLfQoyd12yX4sEONZYdhjUT94vdddVA

# The Distribution of First Digits

In this lab, you will explore the distribution of first digits in real data. For example, the first digits of the numbers 52, 30.8, and 0.07 are 5, 3, and 7 respectively. In this lab, you will investigate the question: how frequently does each digit 1-9 appear as the first digit of the number?

## Question 0

Make a prediction. 

1. Approximately what percentage of the values do you think will have a _first_ digit of 1? What percentage of the values do you think will have a first digit of 9?
2. Approximately what percentage of the values do you think will have a _last_ digit of 1? What percentage of the values do you think will have a last digit of 9?

(Don't worry about being wrong. You will earn full credit for any justified answer.)

I believe that it'll be evenly distributed for both first and last digits. So the proportion of values that start with 1 will be 1/9, and the proportion of values that start with 9 will also be 1/9. And this the same for the last digits as well.

## Question 1

The [S&P 500](https://en.wikipedia.org/wiki/S%26P_500_Index) is a stock index based on the market capitalizations of large companies that are publicly traded on the NYSE or NASDAQ. The CSV file (https://dlsun.github.io/pods/data/sp500.csv) contains data from February 1, 2018 about the stocks that comprise the S&P 500. We will investigate the first digit distributions of the variables in this data set.

Read in the S&P 500 data. What is the unit of observation in this data set? Is there a variable that is natural to use as the index? If so, set that variable to be the index. Once you are done, display the `DataFrame`.
"""

import pandas as pd

df_sp = pd.read_csv("https://dlsun.github.io/pods/data/sp500.csv")
df_sp

"""It seems like each unit of observation is a stock at a certain day. We can use the date and name columns in conjunction to index the dataframe. """

df_sp.set_index(["date", "Name"], inplace = True)
df_sp.head()

"""## Question 2

We will start by looking at the `volume` column. This variable tells us how many shares were traded on that date.

Extract the first digit of every value in this column. (_Hint:_ First, turn the numbers into strings. Then, use the [text processing functionalities](https://pandas.pydata.org/pandas-docs/stable/text.html) of `pandas` to extract the first character of each string.) Make an appropriate visualization to display the distribution of the first digits. (_Hint:_ Think carefully about whether the variable you are plotting is quantitative or categorical.)

How does this compare with what you predicted in Question 0?
"""

df_sp["1st_dig"] = df_sp["volume"].astype(str).str[0]
df_sp["1st_dig"].value_counts(normalize=True).sort_index().plot.bar()

"""I was way off. 1 shows up more than 30% of the time while 9 shows up around 5% of the time.

## Question 3

Now, repeat Question 2, but for the distribution of _last_ digits. Again, make an appropriate visualization and compare with your prediction in Question 0.
"""

df_sp["last_dig"] = df_sp["volume"].astype(str).str[-1]
df_sp["last_dig"].value_counts(normalize=True).sort_index().plot.bar()

"""I was somewhat right. They both do seem to hover around 1/9.

## Question 4

Maybe the `volume` column was just a fluke. Let's see if the first digit distribution holds up when we look at a very different variable: the closing price of the stock. Make a visualization of the first digit distribution of the closing price (the `close` column of the `DataFrame`). Comment on what you see.

(_Hint:_ What type did `pandas` infer this variable as and why? You will have to first clean the values using the [text processing functionalities](https://pandas.pydata.org/pandas-docs/stable/text.html) of `pandas` and then convert this variable to a quantitative variable.)
"""

df_sp["close"]

"""It read the close column as an object. So we technically could just do the analysis without manipulating the data. However, we'll get rid of the dollar sign regardless."""

df_sp["new_close"] = df_sp["close"].str[1:]
df_sp["first_close"] = df_sp["new_close"].astype(str).str[0]
df_sp["first_close"].value_counts(normalize=True).sort_index().plot.bar()

"""The distribution seems almost identical. Honestly, it makes more sense as I think about it. Like all new digits will start at 1, so it would make sense that they would appear the most for higher values. """